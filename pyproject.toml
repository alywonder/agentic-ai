[project]
name = "agentic-ai"
version = "0.1.0"
description = "Agentic AI workflow system"
authors = [
    { name = "Al Wonder", email = "al@yiwonder.com" },
]
license = "MIT"
readme = "README.md"
requires-python = ">=3.10"
dependencies = ["awhere==0.1.0"]

[project.urls]
Homepage = "https://awhere.ai/"
Documentation = "https://docs.awhere.ai/"
Repository = "https://github.com/alywonder/agentic-ai"


[tool.uv.sources]
awhere = { workspace = true }

[tool.uv.workspace]
members = ["apps/*", "libs/*",]

[dependency-groups]
dev = [
    "devtools>=0.12.2",
    "coverage[toml]>=7.6.2",
    "inline-snapshot>=0.14",
    "pytest>=8.3.3",
    "pytest-examples>=0.0.14",
    "pytest-mock>=3.14.0",
    "pytest-pretty>=1.2.0",
]
lint = [
    "mypy>=1.13.0",
    "pyright>=1.1.390",
    "ruff>=0.8.2",
]
docs = [
    "black>=24.10.0",
    "mkdocs>=1.6.1",
    "mkdocs-glightbox>=0.4.0",
    "mkdocs-material[imaging]>=9.5.48",
    "mkdocstrings-python>=1.12.2",
    "mkdocs-minify-plugin>=0.8.0",
]

[tool.ruff]
line-length = 88
target-version = "py310"
include = [
    "app/**/*.py",
    "libs/**/*.py",
    "tests/**/*.py",
    "docs/**/*.py",
]

[tool.ruff.lint]
extend-select = [
    "Q",
    "RUF100",
    "C90",
    "UP",
    "I",
    "D",
]
flake8-quotes = { inline-quotes = "single", multiline-quotes = "double" }
isort = { combine-as-imports = true }
mccabe = { max-complexity = 15 }
ignore = [
    "D100", # ignore missing docstring in module
    "D102", # ignore missing docstring in public method
    "D104", # ignore missing docstring in public package
    "D105", # ignore missing docstring in magic methods
    "D107", # ignore missing docstring in __init__ methods
    "D203", # ignore one blank line before class
    "D213", # ignore multi-line summary second line
]

[tool.ruff.format]
quote-style = "single"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["D"]
"docs/**/*.py" = ["D"]

[tool.pyright]
typeCheckingMode = "strict"
reportUnnecessaryTypeIgnoreComment = true
reportMissingTypeStubs = false
include = ["apps", "libs", "tests"]
venvPath = ".venv"
# see https://github.com/microsoft/pyright/issues/7771 - we don't want to error on
# decorated functions in tests which are not otherwise used
executionEnvironments = [
  { root = "tests", reportUnusedFunction = false },
]

[tool.mypy]
# plugins = [
#   "pydantic.mypy"
# ]
files = ["apps/**/*.py", "libs/**/*.py"]
exclude = [
    "^test",
    "tests/"
]
strict = true
follow_imports = "silent"
warn_unused_ignores = false
# warn_redundant_casts = true
# disallow_any_generics = true
# check_untyped_defs = true
# no_implicit_reexport = true

# for strict mypy: (this is the tricky one :-))
# disallow_untyped_defs = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.pytest.ini_options]
testpaths = ["**/tests"]
xfail_strict = true
filterwarnings = [
    "error",
]

# https://coverage.readthedocs.io/en/latest/config.html#run
[tool.coverage.run]
# required to avoid warnings about files created by create_module fixture
include = ["apps/**/*.py", "libs/**/*.py"]
omit = ["awhere_examples", "**/tests/**"]
branch = true

# https://coverage.readthedocs.io/en/latest/config.html#report
[tool.coverage.report]
skip_covered = true
show_missing = true
ignore_errors = true
precision = 2
exclude_lines = [
    'def __repr__',
    'pragma: no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING:',
    'if typing.TYPE_CHECKING:',
    '@overload',
    '@typing.overload',
    '\(Protocol\):$',
    'typing.assert_never',
    '$\s*assert_never\(',
    'if __name__ == .__main__.:',
]

[tool.logfire]
ignore_no_config = true

[tool.inline-snapshot.shortcuts]
fix=["create", "fix"]
